by(warpbreaks, tension,
function(x) lm(breaks ~ wool, data = x)))
sapply(tmp, coef)
tmp
?sapply
coef(tmp)
?coef
?sample
n <- 200  # Number of bibs
i <- 5  # Number of races
S <- sample(seq(1:n), n)
S
?matrix
matrix(nrow=2, ncol=2)
n <- 200  # Number of bibs
r <- 5  # Number of races
S <- matirx(nrow=n, ncol=r)
for (i in 1:r) {
S[, i] <- sample(seq(1:n), n)
}
n <- 200  # Number of bibs
r <- 5  # Number of races
S <- matrix(nrow=n, ncol=r)
for (i in 1:r) {
S[, i] <- sample(seq(1:n), n)
}
head(S)
n <- 200  # Number of bibs
r <- 5  # Number of races
S <- matrix(nrow=n, ncol=r, dimnames=c("Draw", "Race"))
for (i in 1:r) {
S[, i] <- sample(seq(1:n), n)
}
S <- data.frame(S)
names(S) <- c("Race1", "Race2", "Race3", "Race4", "Race5")
n <- 200  # Number of bibs
r <- 5  # Number of races
S <- matrix(nrow=n, ncol=r, dimnames=list("Draw", "Race"))
for (i in 1:r) {
S[, i] <- sample(seq(1:n), n)
}
S <- data.frame(S)
names(S) <- c("Race1", "Race2", "Race3", "Race4", "Race5")
list("Draw", "Race")
n <- 200  # Number of bibs
r <- 5  # Number of races
S <- matrix(nrow=n, ncol=r)
for (i in 1:r) {
S[, i] <- sample(seq(1:n), n)
}
S <- data.frame(S)
names(S) <- c("Race1", "Race2", "Race3", "Race4", "Race5")
View(S)
write.table(S, "RandomBibNumbers.txt", sep="\t")
setwd()
getwd()
?write.table
library(XML)
library(RCurl)
U = "http://www.nhl.com/ice/teamstats.htm?fetchKey=20132ALLSAAALL&viewName=summary"
tables = readHTMLTable(U)
table = tables[[5]]
table = table[,2:ncol(table)]
View(table)
colnames(table) = gsub("\n", "", colnames(table))
colnames(table) = tolower(colnames(table))
View(table)
df = table[,3:ncol(table)]
View(table)
View(df)
df = do.call(data.frame, lapply(df, function(x) as.numeric(as.character(x))))
View(df)
View(table)
View(df)
df = table[,3:ncol(table)]
View(df)
df = do.call(data.frame, lapply(df, function(x) as.numeric(as.character(x))))
View(df)
row.names(df) = table$team
View(df)
df = scale(df)
View(df)
dmat = dist(df)
labels(dmat)
fix(dmat)
hc1 = hclust(dmat)
hc2 = hclust(dmat, method="ward")
hc3 = hclust(dmat, method="average")
plot(hc1, xlab="Team", main=hc1$method)
plot(hc2, xlab="Team", main=hc2$method)
plot(hc3, xlab="Team", main=hc3$method)
View(df)
View(table)
install.packages("metafor")
reuire(metafor)
require(metafor)
help(metafor)
### load data
dat <- get(data(dat.nielweise2007))
### standard (inverse-variance) random-effects model
res <- rma(measure="OR", ai=ai, n1i=n1i, ci=ci, n2i=n2i, data=dat, drop00=TRUE)
print(res, digits=3)
predict(res, transf=exp, digits=2)
### random-effects conditional logistic model
## Not run:
res <- rma.glmm(measure="OR", ai=ai, n1i=n1i, ci=ci, n2i=n2i, data=dat, model="CM.EL")
print(res, digits=3)
predict(res, transf=exp, digits=2)
plot(res)
labbe(res)
View(dat)
forest(res)
help(forest)
View(dat)
forest(res, slab=dat$author)
View(dat)
forest(res, slab=dat$author, ilab=dat$studies)
forest(res, slab=dat$author, ilab=dat$study)
forest(res, slab=dat$author, ilab=dat$study, ilab.xpos=1)
forest(res, slab=dat$author, addcred=TRUE)
install.packages("shiny")
library(shiny)
runGist('5792778')
#initialize
library(datasets)
library(ggplot2)
#helper function (convert vector to named list)
namel<-function (vec){
tmp<-as.list(vec)
names(tmp)<-as.character(unlist(vec))
tmp
}
# shiny server side code for each call
shinyServer(function(input, output, session){
#update variable and group based on dataset
output$variable <- renderUI({
obj<-switch(input$dataset,
"iris" = iris,
"mtcars" = mtcars)
var.opts<-namel(colnames(obj))
selectInput("variable","Variable:", var.opts) # uddate UI
})
output$group <- renderUI({
obj<-switch(input$dataset,
"iris" = iris,
"mtcars" = mtcars)
var.opts<-namel(colnames(obj))
selectInput("group","Groups:", var.opts) # uddate UI
})
output$caption<-renderText({
switch(input$plot.type,
"boxplot" 	= 	"Boxplot",
"histogram" =	"Histogram",
"density" 	=	"Density plot",
"bar" 		=	"Bar graph")
})
output$plot <- renderUI({
plotOutput("p")
})
#plotting function using ggplot2
output$p <- renderPlot({
plot.obj<<-list() # not sure why input$X can not be used directly?
plot.obj$data<<-get(input$dataset)
plot.obj$variable<<-with(plot.obj$data,get(input$variable))
plot.obj$group<<-with(plot.obj$data,get(input$group))
#dynamic plotting options
plot.type<-switch(input$plot.type,
"boxplot" 	= 	geom_boxplot(),
"histogram" =	geom_histogram(alpha=0.5,position="identity"),
"density" 	=	geom_density(alpha=.75),
"bar" 		=	geom_bar(position="dodge")
)
require(ggplot2)
#plotting theme
.theme<- theme(
axis.line = element_line(colour = 'gray', size = .75),
panel.background = element_blank(),
plot.background = element_blank()
)
if(input$plot.type=="boxplot")	{		#control for 1D or 2D graphs
p<-ggplot(plot.obj$data,
aes(
x 		= plot.obj$group,
y 		= plot.obj$variable,
fill 	= as.factor(plot.obj$group)
)
) + plot.type
if(input$show.points==TRUE)
{
p<-p+ geom_point(color='black',alpha=0.5, position = 'jitter')
}
} else {
p<-ggplot(plot.obj$data,
aes(
x 		= plot.obj$variable,
fill 	= as.factor(plot.obj$group),
group 	= as.factor(plot.obj$group),
#color 	= as.factor(plot.obj$group)
)
) + plot.type
}
p<-p+labs(
fill 	= input$group,
x 		= "",
y 		= input$variable
)  +
.theme
print(p)
})
})
# UI for app
shinyUI(pageWithSidebar(
# title
headerPanel("Select Options"),
#input
sidebarPanel
(
selectInput("dataset","Data:",
list(iris = "iris", mtcars = "mtcars")
),
uiOutput("variable"), 	# depends on dataset ( set by output$variable in  server.R)
uiOutput("group"),  		# depends on dataset	( set by output$group in  server.R)
selectInput("plot.type","Plot Type:",
list(boxplot = "boxplot", histogram = "histogram", density = "density", bar = "bar")
),
checkboxInput("show.points", "show points", TRUE)
),
# output
mainPanel(
h3(textOutput("caption")),
#h3(htmlOutput("caption")),
uiOutput("plot") # depends on input
)
))
runGist('5792778')
?runGist
install.packages("maptools")
library("maptools")
map <- readShapePoly(file.choose(), proj4string=CRS("+proj=longlat"))
plot(map)
map <- readShapePoly(file.choose(), proj4string=CRS("+proj=longlat"))
plot(map)
map <- readShapePoly(file.choose(), proj4string=CRS("+proj=longlat"))
plot(map)
map <- readShapePoly(file.choose(), proj4string=CRS("+proj=longlat"))
plot(map)
map <- readShapePoly(file.choose(), proj4string=CRS("+proj=longlat"))
plot(map)
fix(map)
help(maptools)
map <- readShapePoly(file.choose(), proj4string=CRS("+proj=longlat"))
plot(map)
names(map)
require(maptools)
?dir
shpdir <- "E:/Share/DataRepository/Shapefiles/TIGER 2012/tl_2012_us_county/"
paste(shpdir, "tl_2012_us_county.shp")
shpfile <- paste(shpdir, "tl_2012_us_county.shp", sep="")
shpfile
mapCcounty <- readShapePoly(shpfile, proj4string=CRS("+proj=longlat"))
mapCounty <- readShapePoly(shpfile, proj4string=CRS("+proj=longlat"))
shpdir <- "E:/DataRepository/Shapefiles/TIGER 2012/tl_2012_us_county/"
shpfile <- paste(shpdir, "tl_2012_us_county.shp", sep="")
mapCounty <- readShapePoly(shpfile, proj4string=CRS("+proj=longlat"))
names(mapCounty)
mapCounty <- mapCounty[mapCounty$STATEFP == "OR",]
table(mapCounty$STATEFP)
mapCounty <- mapCounty[mapCounty$STATEFP == 41,]
plot(mapCounty)
shpdir <- "E:/DataRepository/Shapefiles/TIGER 2012/tl_2012_us_county/"
shpfile <- paste(shpdir, "tl_2012_us_county.shp", sep="")
mapCounty <- readShapePoly(shpfile, proj4string=CRS("+proj=longlat"))
mapCounty <- subset(mapCounty, STATEFP == 41)
plot(mapCounty)
names(mapCounty)
table(mapCounty$COUNTYFP)
table(mapCounty$COUNTYNS)
table(mapCounty$NAME)
shpdir <- "E:/DataRepository/Shapefiles/TIGER 2012/tl_2012_us_county/"
shpfile <- paste(shpdir, "tl_2012_us_county.shp", sep="")
mapCountyUS <- readShapeLines(shpfile, proj4string=CRS("+proj=longlat"))
mapCountyOR <- subset(mapCountyUS, STATEFP == 41)
plot(mapCountyOR)
mapCountyUS <- readShapePoints(shpfile, proj4string=CRS("+proj=longlat"))
mapCountyUS <- readShapeLines(shpfile)  #, proj4string=CRS("+proj=longlat"))
mapCountyOR <- subset(mapCountyUS, STATEFP == 41)
plot(mapCountyOR)
datadir <- "C:/Users/chanb/Copy/Sandbox/GIS/PEP_2012_PEPANNRES"
datafile <- paste(datadir, "PEP_2012_PEPANNRES_with_ann.csv", sep="")
popCountyOR <- read.csv(datafile, header=TRUE)
datadir <- "C:/Users/chanb/Copy/Sandbox/GIS/PEP_2012_PEPANNRES"
datafile <- paste(datadir, "PEP_2012_PEPANNRES_with_ann.csv", sep="/")
popCountyOR <- read.csv(datafile, header=TRUE)
View(popCountyOR)
head(mapCountyOR)
names(mapCountyOR)
head(mapCountyOR$GEOID)
names(popCountyOR)
test <- merge(mapCountyOR, popCountyOR, by.x=GEOID, by.y=GEO.id2)
test <- merge(mapCountyOR, popCountyOR, by.x="GEOID", by.y="GEO.id2")
source('~/.active-rstudio-document', echo=TRUE)
head(test)
?merge
?maptools
?readShapeLines
test2 <- SpatialLinesDataFrame(test)
?SpatialLinesDataFram
??SpatialLinesDataFram
plotvar <- mapCountyOR@data$AREA
plotvar
names(mapCountyOR)
plotvar <- mapCountyOR@data$ALAND
plotvar
mapCountyUS <- readShapePoly(shpfile, proj4string=CRS("+proj=longlat"))
names(mapCountyUS)
L
mapCountyUS <- readShapeLines(shpfile, proj4string=CRS("+proj=longlat"))
library(gpclib)
library(maptools)     # loads sp library too
library(RColorBrewer) # creates nice color schemes
library(classInt)     # finds class intervals for continuous variables
orotl.shp <- readShapeLines(file.choose(),
proj4string=CRS("+proj=longlat"))
install.packages("gpclib")
install.packages("classInt")
library(gpclib)
library(maptools)     # loads sp library too
library(RColorBrewer) # creates nice color schemes
library(classInt)     # finds class intervals for continuous variables
gpclibPermit()
# outlines of Oregon counties (lines)
# browse to orotl.shp
orotl.shp <- readShapeLines(file.choose(),
proj4string=CRS("+proj=longlat"))
# Oregon climate station data (points)
# browse to orstations.shp
orstations.shp <- readShapePoints(file.choose(),
proj4string=CRS("+proj=longlat"))
# Oregon county census data (polygons)
# browse to orcounty.shp
orcounty.shp <- readShapePoly(file.choose(),
proj4string=CRS("+proj=longlat"))
setwd("C:/Users/chanb/Copy/Sandbox/GIS")
orstationc <- read.csv("Data/orstationc.csv")
orcountyp <- read.csv("Data/orcountyp.csv")
cities <- read.csv("Data/cities.csv")
orstationc <- read.csv("Data/orstationc.csv")
orcountyp <- read.csv("Data/orcountyp.csv")
cities <- read.csv("Data/cities2.csv")
summary(orcounty.shp)
attributes(orcounty.shp)
attributes(orcounty.shp@data)
attr(orcounty.shp,"polygons")
summary(mapCountyOR)
# equal-frequency class intervals
plotvar <- orcounty.shp@data$POP1990
nclr <- 8
plotclr <- brewer.pal(nclr,"BuPu")
class <- classIntervals(plotvar, nclr, style="quantile")
colcode <- findColours(class, plotclr)
plot(orcounty.shp, xlim=c(-124.5, -115), ylim=c(42,47))
plot(orcounty.shp, col=colcode, add=T)
title(main="Population 1990",
sub="Quantile (Equal-Frequency) Class Intervals")
legend(-117, 44, legend=names(attr(colcode, "table")),
fill=attr(colcode, "palette"), cex=0.6, bty="n")
summary(orcounty.shp)
# symbol plot -- equal-interval class intervals
plotvar <- orstationc$tann
nclr <- 8
plotclr <- brewer.pal(nclr,"PuOr")
plotclr <- plotclr[nclr:1] # reorder colors
class <- classIntervals(plotvar, nclr, style="equal")
colcode <- findColours(class, plotclr)
plot(orotl.shp, xlim=c(-124.5, -115), ylim=c(42,47))
points(orstationc$lon, orstationc$lat, pch=16, col=colcode, cex=2)
points(orstationc$lon, orstationc$lat, cex=2)
title("Oregon Climate Station Data -- Annual Temperature",
sub="Equal-Interval Class Intervals")
legend(-117, 44, legend=names(attr(colcode, "table")),
fill=attr(colcode, "palette"), cex=0.6, bty="n")
# symbol plot -- equal-interval class intervals
plotvar <- orstations.shp@data$pann
nclr <- 5
plotclr <- brewer.pal(nclr,"BuPu")
class <- classIntervals(plotvar, nclr, style="fixed",
fixedBreaks=c(0,200,500,1000,2000,5000))
colcode <- findColours(class, plotclr)
orstations.pts <- orstations.shp@coords # get point data
plot(orotl.shp, xlim=c(-124.5, -115), ylim=c(42,47))
points(orstations.pts, pch=16, col=colcode, cex=2)
points(orstations.pts, cex=2)
title("Oregon Climate Station Data -- Annual Precipitation",
sub="Fixed-Interval Class Intervals")
legend(-117, 44, legend=names(attr(colcode, "table")),
fill=attr(colcode, "palette"), cex=0.6, bty="n")
shpdir <- "E:/DataRepository/Shapefiles/TIGER 2012/tl_2012_us_county"
shpfile <- paste(shpdir, "tl_2012_us_county.shp", sep="/")
mapCountyUS <- readShapeLines(shpfile, proj4string=CRS("+proj=longlat"))
# mapCountyUS <- readShapePoly(shpfile, proj4string=CRS("+proj=longlat"))
mapCountyOR <- subset(mapCountyUS, STATEFP == 41)
shpdir <- "E:/DataRepository/Shapefiles/TIGER 2012/tl_2012_us_county"
shpfile <- paste(shpdir, "tl_2012_us_county.shp", sep="/")
# mapCountyUS <- readShapeLines(shpfile, proj4string=CRS("+proj=longlat"))
mapCountyUS <- readShapePoly(shpfile, proj4string=CRS("+proj=longlat"))
mapCountyOR <- subset(mapCountyUS, STATEFP == 41)
d <- mapCountyOR@data
d
shpdir <- "E:/DataRepository/Shapefiles/TIGER 2012/tl_2012_us_zcta510"
shpfile <- paste(shpdir, "tl_2012_us_zcta510.shp", sep="/")
shpUS <- readShapePoly(shpfile, proj4string=CRS("+proj=longlat"))
shpOR <- subset(shpUS, STATEFP == 41)
summary(shpUS)
?grepl
shpOR <- subset(shpUS, grepl("/^98/", ZCTA5CE10))
shpOR <- subset(shpUS, grep("/^98/", ZCTA5CE10))
shpOR <- subset(shpUS, grepl("/^98/", ZCTA5CE10))
shpOR <- subset(shpUS, grepl("^98", ZCTA5CE10))
plot(shpOR)
shpOR <- subset(shpUS, grepl("^97", ZCTA5CE10))
plot(shpOR)
dir <- "E:/DataRepository/Shapefiles/TIGER 2012/ZCTA Relationship Files"
file <- paste(dir, "zcta_county_rel_10.txt", sep="/")
zctarel <- read.table(file, header=TRUE, delimiter=",")
zctarel <- read.table(file, header=TRUE, sep=",")
head(zctarel)
zctarelOR <- subste(zctarel, STATE == 41)
zctarelOR <- subset(zctarel, STATE == 41)
summary(shpUS)
sprintf("%05d", 1)
zctaOR <- sprintf("%05d", zctarelOR$ZCTA5)
head(zctaOR)
zctarelOR <- data.frame(ZCTA5CHR, zctarelOR)
ZCTA5CHR <- sprintf("%05d", zctarelOR$ZCTA5)
zctarelOR <- data.frame(ZCTA5CHR, zctarelOR)
head(zctarelOR)
summary(shpUS)
shpOR <- subset(shpUS, ZCTA5CE10 %in% ZCTA5CHR)
summary(shpOR)
d <- shpOR@data
d <- merge(d, zctarelOR, by.x=ZCTA5CE10, by.y=ZCTA5CHR)
d <- merge(d, zctarelOR, by.x=ZCTA5CHR, by.y=ZCTA5CE10)
table(ZCTA5CHR)
zctarelOR[ZCTA5==97206]
zctarelOR[ZCTA5==97206,]
zctarelOR[zctarelOR$ZCTA5==97206,]
names(zctarelOR)
d1 <- shpOR@data
d2 <- subset(zctarelOR, select=c(ZCTA5CHR, ZCTA5, STATE, ZPOP, ZHU, ZAREA, ZAREALAND))
d <- merge(d1, d2, by.x=ZCTA5CE10, by.y=ZCTA5CHR)
summary(shpOR)
names(d1)
d <- merge(d1, d2, by.x="ZCTA5CE10", by.y="ZCTA5CHR")
head(d)
d <- merge(d1, d2, by.x="ZCTA5CE10", by.y="ZCTA5")
head(d)
shpOR <- subset(shpUS, ZCTA5CE10 %in% ZCTA5)
shpOR <- subset(shpUS, ZCTA5CE10 %in% zctarelOR$ZCTA5)
summary(shpOR)
summary(shpOR)
shpOR@data <- d
summary(shpOR)
plot(shpOR)
View(zctarelOR)
require(RColorBrewer)
?classIntervals
?quantile
?findColors
?findColours
x <- shpOR@data$ZPOP
pal <- brewer.pal(7, "Blues")
class <- classIntervales(x, 7, style="quantile")
class <- classIntervals(x, 7, style="quantile")
colcode <- findColours(class, pal)
plot(shpOR, col=colcode)
pal
pal[7:1]
x <- shpOR@data$ZPOP
ncolors <- 7
pal <- brewer.pal(ncolors, "Blues")
pal <- pal[ncolors:1]  # reverse the palette]
class <- classIntervals(x, ncolors, style="quantile")
colcode <- findColours(class, pal)
plot(shpOR, col=colcode)
x <- shpOR@data$ZPOP
ncolors <- 7
pal <- brewer.pal(ncolors, "Blues")
pal <- pal[ncolors:1]  # reverse the palette]
class <- classIntervals(x, ncolors, style="fixed")
colcode <- findColours(class, pal)
plot(shpOR, col=colcode)
x <- shpOR@data$ZPOP
ncolors <- 7
pal <- brewer.pal(ncolors, "Blues")
pal <- pal[ncolors:1]  # reverse the palette]
class <- classIntervals(x, ncolors, style="equal")
colcode <- findColours(class, pal)
plot(shpOR, col=colcode)
x <- shpOR@data$ZPOP
ncolors <- 7
pal <- brewer.pal(ncolors, "Blues")
# pal <- pal[ncolors:1]  # reverse the palette]
class <- classIntervals(x, ncolors, style="equal")
colcode <- findColours(class, pal)
plot(shpOR, col=colcode)
x <- shpOR@data$ZPOP
ncolors <- 7
pal <- brewer.pal(ncolors, "Blues")
# pal <- pal[ncolors:1]  # reverse the palette]
class <- classIntervals(x, ncolors, style="pretty")
colcode <- findColours(class, pal)
plot(shpOR, col=colcode)
